generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CREATOR
  ADMIN
  USER
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  email             String            @unique
  name              String
  password          String
  avatar            String?
  isVerified        Boolean           @default(false)
  isCompleted       Boolean           @default(false)
  ownedWorkspaces   Workspace[]       @relation("UserWorkspaces")
  memberships       Membership[]      @relation("UserMemberships")
  providers         Provider[]
  backgrounds       Background[]
  activeWorkspaceId String?           @db.ObjectId
  activeWorkspace   Workspace?        @relation("ActiveWorkspace", fields: [activeWorkspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdProjects   Project[]         @relation("UserCreatedProjects")
  createdTasks      Task[]            @relation("UserCreatedTasks")
  favoriteProjects  FavoriteProject[] @relation("UserFavorites")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Provider {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  provider   String
  providerId String
  userId     String @db.ObjectId
  user       User   @relation(fields: [userId], references: [id])
}

model Background {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  isDefault Boolean @default(false)
  isCustom  Boolean @default(false)
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  avatar      String?
  ownerId     String       @unique @db.ObjectId
  owner       User         @relation("UserWorkspaces", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  activeUsers User[]       @relation("ActiveWorkspace")
  memberships Membership[] @relation("WorkspaceMemberships")
  projects    Project[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Membership {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  workspaceId String @db.ObjectId
  role        Role

  user      User      @relation("UserMemberships", fields: [userId], references: [id])
  workspace Workspace @relation("WorkspaceMemberships", fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, workspaceId])
}

model Project {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  avatar      String?
  workspaceId String            @db.ObjectId
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  creatorId   String            @db.ObjectId
  creator     User              @relation("UserCreatedProjects", fields: [creatorId], references: [id])
  favorites   FavoriteProject[] @relation("ProjectFavorites")
  columns     Column[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Column {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  order     Int
  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id])
  tasks     Task[]
}

model FavoriteProject {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  projectId String @db.ObjectId

  user    User    @relation("UserFavorites", fields: [userId], references: [id])
  project Project @relation("ProjectFavorites", fields: [projectId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, projectId])
}

model Task {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  order     Int
  columnId  String @db.ObjectId
  column    Column @relation(fields: [columnId], references: [id])
  creatorId String @db.ObjectId
  creator   User   @relation("UserCreatedTasks", fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
